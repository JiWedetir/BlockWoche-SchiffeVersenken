@using SchiffeVersenken.Data.Sea;

<table style="background-image: @_bgUrl">
	@for (int y = -1; y <= _fieldSize; y++)
	{
		<tr>
			@for (int x = -1; x <= _fieldSize; x++)
			{
                if (y == -1)
                {
                    <!-- Header -->
                    if (x == -1 || x == _fieldSize)
                    {
                        <td class="border"></td>
                    }
                    else
                    {
                        <td class="border">@_alphabet[x]</td>
                    }
                }
                else if (y == _fieldSize)
                {
                    <!-- Footer -->
                    <td></td>
                }
                else
                {
                    if (x == -1)
                    {
                        <td class="border">@(y + 1)</td>
                    }
                    else if (x == _fieldSize)
                    {
                        <td class="border"></td>
                    }
                    else
                    {
                        int col = x;
                        int row = y;
                        <!-- Square -->
                        if (FieldType == FieldTypes.EnemyField)
                        {
                            string cssClassEnemy = Field[col, row]._State switch{
                                SquareState.Ship => "ship-placed",
                                SquareState.Hit => "ship-hit",
                                SquareState.Miss => "ship-missed",
                                SquareState.Sunk => "ship-sunk",
                                _ => ""
                            };
                            <td class="cell square-enemy @cssClassEnemy" @onclick="() => FieldClicked(col, row)"></td>
                        }
                        else
                        {
                            string cssClassOwn = Field[col, row]._State switch{
                                SquareState.Ship => "ship-placed",
                                SquareState.Hit => "ship-hit",
                                SquareState.Miss => "ship-missed",
                                SquareState.Sunk => "ship-sunk",
                                _ => ""
                            };
                            <td class="cell @cssClassOwn"></td>
                        }                        
                    }
                }
			}
		</tr>
	}
</table>


<style>
    :root {
        --field-count: calc(@_fieldSize + 2);
        --field-size: 35vw;
        --cell-size: calc(var(--field-size) / var(--field-count));
    }
</style>


@code {
    private char[] _alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
    private int _fieldSize;
    private string _bgUrl;

    public enum FieldTypes
    {
        PlacementField,
        OwnField,
        EnemyField
    }

    [Parameter]
    public Square[,] Field { get; set; }

    [Parameter]
    public FieldTypes FieldType { get; set; }

    // EventCallback-Delegat, der die Funktion in der Parent Page aufruft
    [Parameter] public EventCallback<int[]> OnFieldClicked { get; set; }

    // Funktion, die vom Button aufgerufen wird
    private async Task FieldClicked(int x, int y)
    {
        // Aufruf der Funktion in der Parent Page über den EventCallback
        int[] coords = new int[] { x, y };
        await OnFieldClicked.InvokeAsync(coords);
    }

    protected override void OnInitialized()
    {
        _fieldSize = Field.GetLength(0);
        switch (FieldType)
		{
			case FieldTypes.PlacementField:
				_bgUrl = "url(../images/backgroundbattlefieldown.png)";
				break;
			case FieldTypes.OwnField:
				_bgUrl = "url(../images/ownfield.png)";
				break;
			case FieldTypes.EnemyField:
				_bgUrl = "url(../images/enemyfield.png)";
				break;
			default:
				break;
		}
    }

}
