---
title: BlockWoche-SchiffeVersenken
---
classDiagram
namespace Model {
    class GameLogic {
        -_currentState: IBattleShipsGameState
        -_Player: Player 
        -_Opponent: IOpponent 
        -_BattlefieldPlayer: Battlefield
        -_BattlefieldOpponent: Battlefield 
        -_Player1TurnState: Player1TurnState 
        -_Player2TurnState: Player2TurnState 
        -_Winner: string 
        -_Looser: string 
        -_ComputerOpponent: IngeniousOpponent 
        -_ComputerDifficulty: ComputerDifficulty 
        -_Size: int 
        -_OpponentShipsSet: bool 
        -_GameOver: bool 
        -_PlayerScore: int 
        -_LocalGame: bool 
        +GameLogic()
        +void TransistionToState(IBattleShipsGameState newState)
        +void HandlePlayerInput(int x, int y)
        +void StartPlacingShips(int size, ComputerDifficulty difficulty)
        +void AllShipAreSet()
        +void SelectPlayer(bool hit, bool gameOver)
    }
    class GameLogicService {
        -Game: GameLogic
        +void CreateNewGame()
    }
    class IBattleShipsGameState {
        <<interface>>
        +void ExitState(GameLogic game)
        +void EnterState(GameLogic game)
        +void AfterEnterState(GameLogic game)
        +Task HandleInput(GameLogic game, int x, int y)
    }
    class PreGameState {
        +void AfterEnterState(GameLogic game)
        +void EnterState(GameLogic game)
        +void ExitState(GameLogic game)
        +Task HandleInput(GameLogic game, int x, int y)
    }
    class Player1TurnState {
        +void AfterEnterState(GameLogic game)
        +void EnterState(GameLogic game)
        +void ExitState(GameLogic game)
        +Task HandleInput(GameLogic game, int x, int y)
    }
    class Player2TurnState {
        +void AfterEnterState(GameLogic game)
        +void EnterState(GameLogic game)
        +void ExitState(GameLogic game)
        +Task HandleInput(GameLogic game, int x, int y)
    }
    class GameOverState {
        +void AfterEnterState(GameLogic game)
        +void EnterState(GameLogic game)
        +void ExitState(GameLogic game)
        +Task HandleInput(GameLogic game, int x, int y)
    }
}
namespace ComputerPlayer {
    class StupidOpponent {
        -_battlefield: Battlefield 
        -_computer: ComputerOpponent 
        -_random: Random 
        -_x: int 
        -_y: int 
        -_shipsToFinde: int[] 
        +_shootHistory: List~(int x, int y, bool hit, bool sunk)~ 
        +_X: int 
        +_Y: int 
        +StupidOpponent(GameLogic game)
        +async Task ShootStupidAsync()
    }

    class CleverOpponent {
        -_cleverFieldFound: bool 
        -_size: int 
        +CleverOpponent(GameLogic game)
        +async Task ShootCleverAsync()
        -void MarkAdjacentSquares(int x, int y)
        -bool CheckAdjacentSquares(int x, int y)
        -bool CheckVerticalNeighbors(int x, int y)
        -bool SearchInRow(int x, int y)
        -bool CheckHorizontalNeighbors(int x, int y)
        -bool SeachInCollumn(int x, int y)
        -void RemoveShipFromShipToFind(int length)
    }

    class IngeniousOpponent {
        -_possibleFields: List~int[,]~ 
        +IngeniousOpponent(GameLogic game)
        +async Task ShootIngeniousAsync()
        +async Task CreatePossiblePossitions()
        -void CreatePossibleFields()
        -int[,] GetAverageShipPlacement()
        -void GetHighestAverage(int[,] averageShipPlacement)
        -bool PlaceShips(int[] shipLengths, int index, int maxTries, List~ShipDetails~ placedShips, int[,] tryField)
        -bool TryPlaceShip(int length, List~ShipDetails~ placedShips, int[,] tryField)
        -bool CanPlaceShip(ShipDetails ship, int[,] tryField)
        -void RemoveLastShip(List~ShipDetails~ placedShips, int[,] tryField)
        +static void Shuffle~T~(List~T~ list)
    }

}
namespace Controller {
    class ComputerOpponent {
        -_size: int 
        -_board: Square[,]
        -_game: GameLogic 
        -_tryBoard: int[,]
        -shipLengths: int[] 
        +_YourTurn: bool
        +ComputerOpponent(GameLogic game)
        +async Task SetShipAsync()
        +async Task ShootAsync()
        +Task~bool~ SetShipAsync(int[,] board)
        -bool PlaceShips(int[] shipLengths, int index, int maxTries, List~ShipDetails~ placedShips)
        -bool TryPlaceShip(int length, List~ShipDetails~ placedShips)
        -bool CanPlaceShip(ShipDetails ship)
        -void RemoveLastShip(List~ShipDetails~ placedShips)
        +static void Shuffle~T~(List~T~ list)
    }
    class ComputerDifficulty{
        <<enum>>
        Dumm
        Klug
        Genie
    }
    class IOpponent {
        +_YourTurn: bool 
        +Task SetShipAsync()
        +Task~bool~ SetShipAsync(int[,] board)
        +Task ShootAsync()
    }
    class NetworkOpponent {
        -_game: GameLogic 
        -_board: Square[,] 
        +_YourTurn: bool 
        +NetworkOpponent(GameLogic game)
        +async Task~bool~ SetShipAsync(int[,] board)
        +Task SetShipAsync()
        +Task ShootAsync()
        -List~ShipDetails~ FindShips(int[,] board)
    }
    class Player {
        -_size: int 
        -placedShips: List~Ship~ 
        -_game: GameLogic
        +_YourTurn: bool 
        +Player(GameLogic game)
        +bool CheckShips(List~ShipDetails~ shipsToCheck)
        +bool SetShips(List~ShipDetails~ shipsToSet)
        +bool CheckIfAllShipsSet()
        +void Shoot(int x, int y)
    }
}
namespace Database {
    class Constants {
        <<static>>
        -const string DatabaseFilename : "BattleShipSQLite.db3"
        -const SQLiteOpenFlags Flags : ReadWrite | Create | FullMutex
        -string DatabasePath
    }
    class DatabaseAccess {
        -Database: SQLiteAsyncConnection 
        +async Task Init()
        +async Task CreateDefaultUsers()
        +async Task~List~User~ GetUserNamesAsync()
        +async Task~User~ GetUserAsync(int id)
        +async Task~User~ GetUserAsync(string name)
        +async Task~int~ SaveUserAsync(User user)
        +async Task~int~ DeleteUserAsync(User user)
        +async Task~List~UserScore~ GetUserScoreAsync(string username)
        +async Task~int~ UpdateScoresAsync(Highscore highscore)
    }
    class Highscore {
        +Id: int 
        +Score: int 
        +Opponent: string 
        +Won: bool 
        +User_Id: int 
    }
    class HighScores {
        +async static Task~List~UserScore~ GetHighScores(string username)
        +async static Task~bool~ SaveHighScore(string winner, int score)
    }
    class PasswordHasher {
        <<static>>
        +string GenerateSalt()
        +string HashPassword(string password, string salt)
    }
    class User {
        +int Id
        +string Name
        +string PasswordHash
        +string Salt
    }
    class UserManagement {
        -_Player: static User 
        -_Opponent: static User 
        +static async Task~bool~ RegisterUser(string name, string password)
        +static async Task~bool~ LoginUser(string name, string password)
        +static async Task~List~User~ GetUserNamesAsync()
        +static void SetOpponent(string userName)
        +static async Task SetDefaultPlayer()
        +static async Task SetComputerOpponent(ComputerDifficulty opponent)
    }
    class UserScore {
        +Name: string 
        +Score: int 
        +Opponent: string 
        +Won: bool 
    }
}
namespace Network {
    class ClientAsync {
        -_client: TcpClient 
        -_stream: NetworkStream 
        -_cancellationTokenSource: CancellationTokenSource 
        +_IsClientConnected: bool 
        +async Task ConnectAsync(string ip, int port)
        +async Task SendMessageAsync(string message)
        +void Disconnect()
        -async Task ListenForMessage(CancellationToken cancellationToken)
    }
    class NetworkConnection {
        <<static>>
        -_server: ServerAsync 
        -_client: ClientAsync 
        -_port: int 
        -_isServer: bool 
        -_game: GameLogic
        -_sentMessages: List~(string message, string time)~ 
        -_receivedMessages: List~(string message, string time)~ 
        +_IsRunning: bool 
        +void StartNetwork()
        +void GameLogicConnectedtoNetwork(GameLogic gameLogic)
        +void ServerConnectedtoClient()
        +async Task~bool~ ConnectToServer(string ip, int boardSize)
        +async Task SendMessageAsync(string message)
        +async Task~bool~ ReceiveMessageAsync(string message)
        -bool ReciveInitMessage(JObject message)
        -async Task~bool~ ReciveBoardMessage(JObject message)
        -async Task~bool~ ReciveShotAtMessage(JObject message)
        -bool ReciveTextMessage(JObject message)
        -async Task~bool~ ReciveErrorMessage(JObject message)
        -async Task~bool~ SendInitMessage(string userName, int boardSize)
        +async Task~bool~ SendBoardMessage(int[,] board)
        +async Task~bool~ SendShotAtMessage(int x, int y)
        +async Task~bool~ SendTextMessage(string messageText)
        +async Task~bool~ SendErrorMessage(string error)
    }
    class ServerAsync {
        -_client: TcpClient 
        -_listener: TcpListener 
        +_IsServerConnected: bool 
        +void StartServerAsync(int port)
        +async Task SendMessageAsync(string message)
        +void StopServer()
        -async Task HandleClientAsync()
    }
}
namespace Sea {
    class Ship {
        -_shipSquares: LinkedList~Square~ 
        +_Length: int 
        +Ship()
        +void SetShip(Square square)
        +void Delete()
        +void ShipUpdate()
    }
    class ShipDetails {
        +Name: string 
        +PositionX: int 
        +PositionY: int 
        +Size: int 
        +IsClicked: bool 
        +IsPlaced: bool 
        +Orientation: Orientation 
    }
    class shipsTemplate{
        -static ShipDetails CreateShip()
    }
    class Square {
        +_State: SquareState 
        +?_Ship: Ship 
        +async Task ShootOnSquareAsync()
        +void SetToEmptySquare()
        +void SetToShipSquare(Ship ship)
    }
    class Orientation{
        <<enum>>
        Vertical
        Horizontal
    }
    class SquareState{
        <<enum>>
        Empty
        Miss
        Ship
        Hit
        Sunk
        Blocked
    }
}
namespace View {
    class Battlefield {
        -_size: int 
        -_board: Square[,] 
        +_Board: Square[,]
        +_Size: int 
        +Battlefield(GameLogic game)
        +void CreateField()
        +async Task~bool~ ShootAsync(int x, int y)
        +bool CheckGameOver()
        +Action~SquareState~? OnPlayerAction
		+Action~string~? OnGameOver
    }
}

    

    GameLogic --> IBattleShipsGameState : Current State
    GameLogic --> Player1TurnState : contains
    GameLogic --> Player2TurnState : contains
    GameLogic --> Player : updates
    GameLogic --> Battlefield : Update
    GameLogic --> IngeniousOpponent : Initializes
    GameLogic <-- Player : controller
    GameLogicService --> GameLogic : creates
    PreGameState --> GameLogic : modifies
    Player1TurnState --> GameLogic : modifies
    Player2TurnState --> GameLogic : modifies
    GameOverState --> GameLogic : modifies
    GameOverState --> HighScores : Saves Score
    StupidOpponent <|-- CleverOpponent : Inherits
    CleverOpponent <|-- IngeniousOpponent : Inherits
    IOpponent <|.. ComputerOpponent: Implements
    IOpponent <|.. NetworkOpponent: Implements
    IOpponent --> GameLogic : controller
    Player -- Ship : places > 
    Player -- ShipDetails : checks >
    ComputerOpponent --> ComputerDifficulty
    DatabaseAccess -- User: read/write
    DatabaseAccess -- Highscore: read/write
    DatabaseAccess -- UserScore: create view
    Highscore -- User : "Foreign Key"
    HighScores --> DatabaseAccess : accesses
    HighScores --> UserManagement : checks
    UserManagement --> DatabaseAccess : accesses
    UserManagement --> PasswordHasher : uses
    UserManagement --> User : manages
    IBattleShipsGameState <|.. GameOverState
    IBattleShipsGameState <|.. Player1TurnState
    IBattleShipsGameState <|.. Player2TurnState
    IBattleShipsGameState <|.. PreGameState
    NetworkConnection --> ServerAsync : Uses
    NetworkConnection --> ClientAsync : Uses
    NetworkConnection --> GameLogic : Connects
    NetworkConnection --> UserManagement : Checks Player
    ClientAsync --> NetworkConnection : Receives Messages
    ServerAsync --> NetworkConnection : Notifies & Receives Messages
    Square --> SquareState : Uses
    shipsTemplate --> ShipDetails : Creates
    ShipDetails --> Orientation : Uses
    ShipDetails -- Orientation : uses
    Ship <--> Square : interacts >
    Battlefield --> GameLogic : Uses
    Battlefield --> Square : Contains


Übersicht

---
title: BlockWoche-SchiffeVersenken
---
classDiagram
namespace Model {
    class GameLogic {
    }
    class GameLogicService {
    }
    class IBattleShipsGameState {
        <<interface>>
    }
    class PreGameState {
    }
    class Player1TurnState {
    }
    class Player2TurnState {
    }
    class GameOverState {
    }
}
namespace ComputerPlayer {
    class StupidOpponent {
    }

    class CleverOpponent {
    }

    class IngeniousOpponent {
    }

}
namespace Controller {
    class ComputerOpponent {
    }
    class ComputerDifficulty{
        <<enum>>
    }
    class IOpponent {
        <<interface>>
    }
    class NetworkOpponent {
    }
    class Player {
    }
}
namespace Database {
    class Constants {
    }
    class DatabaseAccess {
    }
    class Highscore {
    }
    class HighScores {
    }
    class PasswordHasher {
    }
    class User {
    }
    class UserManagement {
    }
    class UserScore {
    }
}
namespace Network {
    class ClientAsync {
    }
    class NetworkConnection {
    }
    class ServerAsync {
    }
}
namespace Sea {
    class Ship {
    }
    class ShipDetails {
    }
    class shipsTemplate{
    }
    class Square {
    }
    class Orientation{
        <<enum>>
    }
    class SquareState{
        <<enum>>
    }
}
namespace View {
    class Battlefield {
    }
}

    GameLogic --> IBattleShipsGameState : Current State
    GameLogic --> Player1TurnState : contains
    GameLogic --> Player2TurnState : contains
    GameLogic --> Player : updates
    GameLogic --> Battlefield : Update
    GameLogic --> IngeniousOpponent : Initializes
    GameLogic <-- Player : controller
    GameLogicService --> GameLogic : creates
    PreGameState --> GameLogic : modifies
    Player1TurnState --> GameLogic : modifies
    Player2TurnState --> GameLogic : modifies
    GameOverState --> GameLogic : modifies
    GameOverState --> HighScores : Saves Score
    StupidOpponent <|-- CleverOpponent : Inherits
    CleverOpponent <|-- IngeniousOpponent : Inherits
    IOpponent <|.. ComputerOpponent: Implements
    IOpponent <|.. NetworkOpponent: Implements
    IOpponent --> GameLogic : controller
    Player -- Ship : places > 
    Player -- ShipDetails : checks >
    ComputerOpponent --> ComputerDifficulty
    DatabaseAccess -- User: read/write
    DatabaseAccess -- Highscore: read/write
    DatabaseAccess -- UserScore: create view
    Highscore -- User : "Foreign Key"
    HighScores --> DatabaseAccess : accesses
    HighScores --> UserManagement : checks
    UserManagement --> DatabaseAccess : accesses
    UserManagement --> PasswordHasher : uses
    UserManagement --> User : manages
    IBattleShipsGameState <|.. GameOverState
    IBattleShipsGameState <|.. Player1TurnState
    IBattleShipsGameState <|.. Player2TurnState
    IBattleShipsGameState <|.. PreGameState
    NetworkConnection --> ServerAsync : Uses
    NetworkConnection --> ClientAsync : Uses
    NetworkConnection --> GameLogic : Connects
    NetworkConnection --> UserManagement : Checks Player
    ClientAsync --> NetworkConnection : Receives Messages
    ServerAsync --> NetworkConnection : Notifies & Receives Messages
    Square --> SquareState : Uses
    shipsTemplate --> ShipDetails : Creates
    ShipDetails --> Orientation : Uses
    ShipDetails -- Orientation : uses
    Ship <--> Square : interacts >
    Battlefield --> GameLogic : Uses
    Battlefield --> Square : Contains